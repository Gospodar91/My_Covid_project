{"version":3,"sources":["components/covid19/CovidItem/covidItem.module.css","components/covid19/CovidList/covidList.module.css","components/covid19/CovidItem/CovidItem.js","components/covid19/CovidList/CovidList.js","components/covid19/operations/Operations.js"],"names":["module","exports","CovidItem","maxConfirmed","maxDead","totalRecovered","className","css","infoFirst","map","country","key","Country","countryLi","liDiv","TotalConfirmed","toLocaleString","NewConfirmed","infoSecond","TotalDeaths","NewDeaths","infoThird","TotalRecovered","NewRecovered","latestNewsDiv","maxConfirmedDiv","CovidList","useEffect","getSummaryArray","useState","summaryAray","setSummaryArry","operations","getSummary","then","data","Countries","sort","b","a","slice","container","div_wrapper","newsKey","PNotify","defaults","delay","width","axios","get","console","log","error","title","text","Error","getFlag","searchQuery","total","getNews","getSearchnews","totalResults"],"mappings":"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","file":"static/js/Top5.e432ae9d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"maxConfirmed\":\"covidItem_maxConfirmed__35Vl_\",\"countryLi\":\"covidItem_countryLi__3y2DT\",\"country\":\"covidItem_country__2I0jI\",\"info\":\"covidItem_info__1XKLn\",\"latestNewsDiv\":\"covidItem_latestNewsDiv__1ZpKs\",\"infoFirst\":\"covidItem_infoFirst__2nHxU\",\"infoSecond\":\"covidItem_infoSecond__2LuJp\",\"infoThird\":\"covidItem_infoThird__2imQ-\",\"maxConfirmedDiv\":\"covidItem_maxConfirmedDiv__lNXDb\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"covidList_container__3Sd3e\"};","import React from \"react\";\r\nimport css from \"../CovidItem/covidItem.module.css\";\r\n\r\nconst CovidItem = ({ maxConfirmed, maxDead, totalRecovered }) => {\r\n  return (\r\n    <>\r\n      {maxConfirmed && (\r\n        <>\r\n          <div>\r\n            <h2 className={css.infoFirst}> Top Total Cases</h2>\r\n            <ul className={css.maxConfirmed}>\r\n              {maxConfirmed.map((country) => (\r\n                <li key={country.Country} className={css.countryLi}>\r\n                  <div className={css.liDiv}>\r\n                    <h2 className={css.country}>{country.Country}</h2>\r\n                    <p className={css.infoFirst}>\r\n                      Total cases:{country.TotalConfirmed.toLocaleString()}\r\n                    </p>\r\n                    <p className={css.infoFirst}>\r\n                      Today cases:{country.NewConfirmed.toLocaleString()}\r\n                    </p>\r\n                    <p className={css.infoSecond}>\r\n                      Total deaths:{country.TotalDeaths.toLocaleString()}\r\n                    </p>\r\n                    <p className={css.infoSecond}>\r\n                      Today deaths:{country.NewDeaths.toLocaleString()}\r\n                    </p>\r\n                    <p className={css.infoThird}>\r\n                      Total recovered:{country.TotalRecovered.toLocaleString()}\r\n                    </p>\r\n                    <p className={css.infoThird}>\r\n                      Today recovered:{country.NewRecovered.toLocaleString()}\r\n                    </p>\r\n                  </div>\r\n\r\n                  <div className={css.latestNewsDiv}></div>\r\n                </li>\r\n              ))}\r\n            </ul>\r\n          </div>\r\n          <div>\r\n            <h2 className={css.infoSecond}> Top Total Deaths</h2>\r\n            <ul className={css.maxConfirmed}>\r\n              {maxDead.map((country) => (\r\n                <li key={country.Country} className={css.countryLi}>\r\n                  <div className={css.liDiv}>\r\n                    <h2 className={css.country}>{country.Country}</h2>\r\n                    <p className={css.infoSecond}>\r\n                      Total deaths:\r\n                      {country.TotalDeaths.toLocaleString().toLocaleString()}\r\n                    </p>\r\n                    <p className={css.infoSecond}>\r\n                      Today deaths:\r\n                      {country.NewDeaths.toLocaleString().toLocaleString()}\r\n                    </p>\r\n                    <p className={css.infoFirst}>\r\n                      Total cases:\r\n                      {country.TotalConfirmed.toLocaleString().toLocaleString()}\r\n                    </p>\r\n                    <p className={css.infoFirst}>\r\n                      Today cases:\r\n                      {country.NewConfirmed.toLocaleString().toLocaleString()}\r\n                    </p>\r\n                    <p className={css.infoThird}>\r\n                      Total recovered:\r\n                      {country.TotalRecovered.toLocaleString().toLocaleString()}\r\n                    </p>\r\n                    <p className={css.infoThird}>\r\n                      Today recovered:\r\n                      {country.NewRecovered.toLocaleString().toLocaleString()}\r\n                    </p>\r\n                  </div>\r\n                  <div className={css.latestNewsDiv}></div>\r\n                </li>\r\n              ))}\r\n            </ul>\r\n          </div>\r\n          <div className={css.maxConfirmedDiv}>\r\n            <h2 className={css.infoThird}> Top Total Recovered</h2>\r\n            <ul className={css.maxConfirmed}>\r\n              {totalRecovered.map((country) => (\r\n                <li key={country.Country} className={css.countryLi}>\r\n                  <div className={css.liDiv}>\r\n                    <h2 className={css.country}>{country.Country}</h2>\r\n                    <p className={css.infoThird}>\r\n                      Total recovered:{country.TotalRecovered.toLocaleString()}\r\n                    </p>\r\n                    <p className={css.infoThird}>\r\n                      Today recovered:{country.NewRecovered.toLocaleString()}\r\n                    </p>\r\n                    <p className={css.infoSecond}>\r\n                      Total deaths:{country.TotalDeaths.toLocaleString()}\r\n                    </p>\r\n                    <p className={css.infoSecond}>\r\n                      Today deaths:{country.NewDeaths.toLocaleString()}\r\n                    </p>\r\n                    <p className={css.infoFirst}>\r\n                      Total cases:{country.TotalConfirmed.toLocaleString()}\r\n                    </p>\r\n                    <p className={css.infoFirst}>\r\n                      Today cases:{country.NewConfirmed.toLocaleString()}\r\n                    </p>\r\n                  </div>\r\n                </li>\r\n              ))}\r\n            </ul>\r\n          </div>\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n};\r\nexport default CovidItem;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport CovidItem from \"../CovidItem/CovidItem\";\r\nimport { operations } from \"../operations/Operations\";\r\nimport css from \"./covidList.module.css\";\r\n const CovidList = () => {\r\n  useEffect(() => {\r\n    getSummaryArray();\r\n  }, []);\r\n  const [summaryAray, setSummaryArry] = useState();\r\n  const getSummaryArray = () => {\r\n    operations.getSummary().then((data) => setSummaryArry(data.data.Countries));\r\n  };\r\n  let maxConfirmed, maxDead, totalRecovered;\r\n  if (summaryAray) {\r\n    maxConfirmed = summaryAray\r\n      .sort((b, a) => a.TotalConfirmed - b.TotalConfirmed)\r\n      .slice([0], [5]);\r\n    maxDead = summaryAray\r\n      .sort((b, a) => a.TotalDeaths - b.TotalDeaths)\r\n      .slice([0], [5]);\r\n    totalRecovered = summaryAray\r\n      .sort((b, a) => a.TotalRecovered - b.TotalRecovered)\r\n      .slice([0], [5]);\r\n  }\r\n  return (\r\n    <>\r\n      <div className={css.container}>\r\n        <div className={css.div_wrapper}>\r\n          <CovidItem\r\n            maxConfirmed={maxConfirmed}\r\n            maxDead={maxDead}\r\n            totalRecovered={totalRecovered}\r\n          />\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\nexport default CovidList;","import axios from \"axios\";\r\nimport PNotify from \"pnotify/dist/es/PNotify.js\";\r\nconst KEY = \"15302072-a81be31270c5e4995077a81d4\";\r\nconst newsKey = \"65cb0b3a150c4ecfb6031d583c73fa16\";\r\nPNotify.defaults.delay = 2000;\r\nPNotify.defaults.width = '150px';\r\nexport const operations = {\r\n  async getSummary() {\r\n    try {\r\n      const data = await axios.get(`https://api.covid19api.com/summary`);\r\n      return data;\r\n    } catch (error) {\r\n      console.log(\"GetSummaryError\", error);\r\n      PNotify.error({\r\n        title: \"Sorry:\",\r\n        text: \"Server is overloaded\",\r\n      });\r\n      throw new Error();\r\n    }\r\n  },\r\n\r\n  async getFlag(searchQuery) {\r\n    try {\r\n      const data = await axios.get(\r\n        `https://pixabay.com/api/?key=${KEY}&q=${searchQuery}+flag&per+page=3&image_type=photo`\r\n      );\r\n      if (data.data.total === 0) {\r\n        PNotify.error({\r\n          title: \"Sorry:\",\r\n          text: \"Please write correct country\",\r\n        });\r\n      }\r\n\r\n      return data;\r\n    } catch (error) {\r\n      console.log(\"GetSummaryError\", error);\r\n      throw new Error();\r\n    }\r\n  },\r\n\r\n  async getNews() {\r\n    try {\r\n      const data = await axios.get(\r\n        `https://newsapi.org/v2/everything?qInTitle=covid&language=en&pageSize=3&sortBy=publishedAt&apiKey=${newsKey}`\r\n      );\r\n\r\n      return data;\r\n    } catch (error) {\r\n      console.log(\"GetNewsError\", error);\r\n      throw new Error();\r\n    }\r\n  },\r\n\r\n  async getSearchnews(country) {\r\n    try {\r\n      const data = await axios.get(\r\n        `https://newsapi.org/v2/everything?qInTitle=covid+${country}&pageSize=3&sortBy=publishedAt&apiKey=${newsKey}`\r\n      );\r\n      if (data.data.totalResults === 0) {\r\n        PNotify.error({ title: \"Sorry:\", text: \"News are unavailable now\" });\r\n      }\r\n      console.log('data', data)\r\n      return data;\r\n    } catch (error) {\r\n      console.log(\"GetNewsError\", error);\r\n      throw new Error();\r\n    }\r\n  },\r\n};\r\n"],"sourceRoot":""}